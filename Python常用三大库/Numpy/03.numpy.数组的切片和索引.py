# ndarray对象 的内容可以通过切片或索引来访问和修改
# 其中ndarray的索引又分为“整数数组索引”和“布尔索引”


# ndarray对象的索引
"""
# 整数数组索引：

    # 语法格式：
    ndarray[index1, index2, ..., indexN]
        index1, index2, ..., indexN 可以是整数、切片、整数数组、布尔数组、省略号 (...)或None
        N 的最大值等于数组的维度数，且每个索引对应一个维度

    注意事项：
    1. 通过整数数组明确指定索引位置（支持非连续、重复、任意顺序）
    2. 返回数据的副本（与原数组内存独立）
    3. 索引数组可以是任意形状（结果形状与索引数组一致）
    4. 支持跨维度组合索引（需保证索引数组可广播）

    举例：
    import numpy as np
    # 二维数组索引
    a = np.array([[1, 2, 3], [4, 5, 6]])
    # 访问坐标 (0,1), (0,2), (1,0) 的元素
    print("基础索引结果:", a[[0, 0, 1], [1, 2, 0]])  # 输出 [2 3 4]

    # =============================================
    # 多维应用场景
    # =============================================
    # 获取4x3数组四个角的元素
    a = np.arange(12).reshape(4, 3)
    corners = a[[0, 0, -1, -1], [0, -1, 0, -1]]  # 索引组合为 (0,0), (0,-1), (-1,0), (-1,-1)
    print("四角元素:", corners)  # 输出 [ 0  2  9 11]

    # =============================================
    # 高级用法：索引数组形状控制
    # =============================================
    # 生成2x2的索引结果
    rows = np.array([[0], [2]])     # 形状 (2,1)
    cols = np.array([[1, 0]])       # 形状 (1,2)
    print("形状控制结果:\n", a[rows, cols])  # 输出 [[2 1],[8 7]]

    # =============================================
    # 修改操作验证副本特性
    # =============================================
    # 修改副本不会影响原数组
    copy_data = a[[0, 2]]
    copy_data[0, 0] = 100
    print("原数组未变化:", a[0,0] == 0)  # 输出 True

    
# 布尔索引：
    # =============================================
    # 语法特性说明
    # =============================================

    核心特性：
    1. 通过布尔数组（掩码）筛选元素（True保留，False过滤）
    2. 返回数据的副本（与原数组内存独立）
    3. 布尔数组需与原数组形状兼容（可广播）
    4. 支持组合逻辑运算（&, |, ~）

    # =============================================
    # 一维数组筛选
    # =============================================
    a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
    mask = a > 5
    print("布尔掩码:", mask)  # [False False False False False  True  True  True  True]
    print("筛选结果:", a[mask])  # [6 7 8 9]

    # =============================================
    # 多维数组应用
    # =============================================
    # 筛选所有大于5的元素（展平后输出）
    a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
    print("二维筛选结果:", a[a > 5])  # [6 7 8 9]

    # =============================================
    # 结构化条件筛选
    # =============================================
    # 筛选第2列>3的行（保留维度结构）
    print("列条件筛选行:\n", a[a[:, 2] > 3])  # 输出 [[4 5 6], [7 8 9]]

    # 筛选第1行>3的列（注意广播机制）
    print("行条件筛选列:\n", a[:, a[1] > 3])  # 输出 [[2 3], [5 6], [8 9]]

    # =============================================
    # 复合逻辑运算
    # =============================================
    a = np.arange(1, 11)
    mask = (a % 2 == 0) & (a > 5)  # 必须用括号包裹子条件
    print("偶且大于5:", a[mask])  # [6 8 10]

    mask = (a < 3) | (a > 8)
    print("小于3或大于8:", a[mask])  # [1 2 9 10]
"""


# ndarray对象的切片
"""
语法格式：
ndarray[start:stop:step, ..., start:stop:step]

    start: 起始位置
    stop: 结束位置(不包含)
    step: 步长
    ...: 表示省略的维度中的值全切

注意事项：
ndarray对象切片返回的是一个ndarray对象（原对象的视图）
ndarray对象切片时可以在一个 [] 中进行连续切片，每个维度的切片之间用','分隔
每个维度的切片的start和stop可以越界(两个同时越界都可以)
切片时会先根据步长的正负判断区间[start:end)是否可以进行正向或反向遍历，只要有一个维度的切片不行就会直接返回一个空一维数组
切片中'...'符号的具体作用在举例中有说明

举例：
import numpy as np

arr = np.arange(64).reshape(4, 4, 4)

# ndarray数组 的连续切片只能从第一个维度开始，且一般不能跳维度(除非使用 ... 语法)
print(arr[0:2])             # 只对第一个维度切片
print(arr[0:2, 0:2])        # 只对前两个维度切片
print(arr[0:2, 0:2, 0:2])   # 对所有维度切片

# 下面的方法在高维度数组中具有泛用性
print(arr[0:2, ...])        # 对第一个维度切片，... 表示对一维后面的所有维度全切
print(arr[..., 0:2])        # 对最后一个维度切片，... 表示对最后一维前面的所有维度全切
print(arr[0:2, ..., 0:2])   # 对第一个和最后一个维度切片，... 表示中间的的所有维度全切
"""
