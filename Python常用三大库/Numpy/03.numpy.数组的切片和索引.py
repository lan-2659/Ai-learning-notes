# ndarray对象 的内容可以通过切片或索引来访问和修改
# 其中ndarray的索引又分为“整数数组索引”和“布尔索引”


# ndarray对象的切片
"""
语法格式：
ndarray[start:stop:step, ..., start:stop:step]

    start: 起始位置
    stop: 结束位置(不包含)
    step: 步长
    ...: 表示省略的维度中的值全切

注意事项：
ndarray对象切片返回的是一个ndarray对象（原对象的视图）
ndarray对象切片时可以在一个 [] 中进行连续切片，每个维度的切片之间用','分隔
每个维度的切片的start和stop可以越界(两个同时越界都可以)
切片时会先根据步长的正负判断区间[start:end)是否可以进行正向或反向遍历，只要有一个维度的切片不行就会直接返回一个空一维数组
切片中'...'符号的具体作用在举例中有说明

举例：
import numpy as np

arr = np.arange(64).reshape(4, 4, 4)

# 查询第一列数据
# ...:表示保留整行/列数据，等价于::
print(a[..., 0])

# 查询第一行第一、二列数据
print(a[0, 0:2])

# 查询第二、三行，第二、三列数据
print(a[1:3, 1:3])

# 查询第二行、第二列数据
print(a[1, 1])

# 查询第二、三行数据
print(a[1:3, ...])

"""


# ndarray对象的索引
"""
# 主要用来访问数组中特定位置的元素
a = np.array([[1, 2, 3], [4, 5, 6]])

print(a[[0, 0, 1], [1, 2, 0]])

# 获取4*3数组的四个角上的元素
a = np.arange(12)
a.shape = (4, 3)

print(a[[0, 0, -1, -1], [0, -1, 0, -1]])

# 布尔索引：使用条件表达式来访问满足条件的元素
# 一维数组布尔索引
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
idx = a > 5
print(idx)
a1 = a[idx]
print(a1)

# 二维数组布尔索引
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a[a > 5])

# 切片布尔索引
a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(a[a[:, 2] > 3])

print(a[:, a[1] > 3])

# 逻辑运算符:&-与，|-或，~-非
# 逻辑运算符的每个子条件表达式要用()括起来
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
idx = (a > 5) & (a < 9)
print(idx)
print(a[idx])
"""
