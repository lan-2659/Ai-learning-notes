# 创建列表
"""
# 用list()函数创建列表时, list()中可以放一个可迭代对象，这个函数会把可迭代对象中的每一个元素，装换为列表中的元素
list_x = list('hello world')
list_x = list()    #空列表
list_x = []       #空列表
list_x = ['good', 123, 2.2, 'best', 70.2]    # 直接将一个现成的列表赋值给变量
"""


# 列表推导式
"""
[expression（表达式） for item in iterable if condition]
list_x = [x for x in range(10) if x%2 == 0]
"""


# 列表的运算
"""
list_z = list_x + list_y          # 用'+'连接返回一个新列表

list_z = list_x * 3               # 用'*'重复返回一个新列表
                                  # 注意这里只能乘整数

bool_list = list_x == list_y      # 比较两个列表是否相等(所有对应位置的所有元素相同)

bool_list = list_x != list_y      # 比较两个列表是否不相等(任意一个对应位置的元素不相同)
"""


# 列表的切片与索引
"""
切片的语法是：str[start:end:step]
注意：切片时遵循左闭右开的原则，str[start:end]的end是开区间，不包含end
第三个参数是步长(默认为1)，步长为正时表示正向遍历，步长为负时表示反向遍历
切片时会先根据步长的正负判断区间[start:end)是否可以进行正向或反向遍历，如果不行则会直接返回一个空列表
切片的原理是先切后取，如果判断可以遍历，则会从切下来的部分中代表start的那一端开始取值
并将取到的值组成一个新的列表并返回

list_x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
print(list_x[0])                  # 通过索引输出列表第一个元素
list_x[1] = 2                     # 通过索引修改列表第一个元素

print(list_x[1:3])                # 通过切片输出列表第二个到第三个元素
print(list_x[::-1])               # 倒序输出列表
list_x[1:3] = [2, 3]
print(list_x) 

print(list_x[-1:1:2])             # 输出空列表，这是因为[-1:1]这个范围的列表只能进行反向遍历

需要注意切片切下来的是一个列表（那怕只切一个元素），索引得到的是列表中的某一个值
"""


# 列表对象的常用API
"""
list_x.count(3)        # 返回元素3在列表中出现的次数


x[:3] = []           # 将列表3之前的元素换成空

del x[1]       # 删除x列表中的元素, 且不返回任何值(加了括号就必须指定位置)

del x           # 删除整个列表

x.pop(2)         # 可以删除任意位置的值, 且会返回该值, 如果不在括号中指定值则默认删除最后一个且返回该值

x.remove('删除元素值')     # 该方法只能删除指定值, 括号内必须有内容

x.reverse()                 # 反转列表的排列顺序, 不返回值

x.insert(1, b)               # 在列表序列1后面插入元素b, 不返回值

index(元素)             # 查找元素第一次时的位置，并返回该位置，若是元素不存在会报错
"""
