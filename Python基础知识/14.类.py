# 基础知识
"""
封装：封装是将数据（属性）和操作数据的方法（方法或函数）打包到一个单元（类）中，并对对象的使用者隐藏其内部实现细节的过程。
继承：继承允许一个类（称为子类或派生类）从另一个类（称为父类或基类）继承属性和方法，并且可以新增或修改继承的行为。
多态：指同一个方法调用可以在不同的对象上有不同的行为。

根据类来创建对象被称为实例化，这样做使得我们可以使用类的实例

类的名称首字母一般大写

类中的函数称为方法

隔一行定义一个方法

将大型类拆分为多个协同工作的小类，这种方式叫做组合

"""


# 创建类
"""
class 类名:

    def __init__(self, 其它参数):         # 这是一个特殊方法，每当调用类创建对象时，该方法会被自动调用, 注意它左右两边都有两个下划线
        方法体                              # self是一个指向实例本身的引用，加入这个参数时必须把这个参数放在所有参数的最前面
                                            # self参数不需要我们手动传入，当Python检测到这个参数时会自动传入实例
    def 方法名(参数):                        # __init__()方法中必须包含self这个参数，其它大部分方法都需要加入self这个参数
        方法体

    def 方法名(参数):
        方法体
"""


# 创建实例及其基本用法
"""
实例名 = 类名( __init__()方法需要的参数 )         # 创建实例
实例名.属性名                                  # 访问该实例的属性
实例名.方法名(参数)                             # 调用方法
"""


# 修改类中的属性
"""
通过实例直接修改
通过方法修改
"""


# 类的继承
# 当一个类继承另一个类时，前者将自动获得后者的所有属性和方法，前者称为子类或派生类，后者称为基类、父类或超类
"""
class 子类名(父类名):
    def __init__(self, 其它参数):               # 子类的__init__()方法
        super().__init__(传递的参数)            # 通过super()函数调用父类的__init__()方法
        剩余方法体……                            # 通过super()可以调用父类中的方法

    def 父类方法名(参数):             # 重写父类方法，下次调用该方法时，Python会自动忽略父类中的该方法，只调用子类中被重写的方法
        方法体

    def 其它方法……

super().方法名 可以从父类中进行方法查找，查找顺序时从左到右
可以通过 类名.方法名 来直接访问父类方法

"""


"""
可以在属性和方法名前面添加单下划线（_）、双下划线（__）或者首尾加双下划线来限制访问权限。

单下划线的限制是最弱的，它仅表示该属性或方法只适用于类内部使用，子类也可以访问它。
双下划线表示该属性或方法是私有的，不能被外部访问，也不能被子类继承。
而首尾双下划线表示该属性或方法是极其私有的，只有类本身可以访问，连子类也不能访问。

可以通过 实例._类名__私有属性/方法 这样的方式来访问私有属性/方法
"""


"""
内建方法
    def __str__(self):定义对象的字符串形式，注意这个方法必须有返回内容，返回类型必须是str
    def __len__(self):定义对象的长度，使用 len(对象) 语句时会调用此处的方法，若这个方法不存在该语句会报错
    def __getitem__(self, key): 定义对象的索引操作，使对象可被像列表或字典一样索引。例如，object[key]。
    def __setitem__(self, key, value): 定义对象的赋值操作，使对象可像列表或字典一样赋值。例如，object[key] = value。
    def __delitem__(self, key): 定义对象的删除操作，使对象可像列表或字典一样删除元素。例如，del object[key]。
    def __add__(self, other): 定义对象相加的行为，使对象可以使用+运算符相加。例如，object1 + object2。
    def __sub__(self, other): 定义对象相减的行为，使对象可以使用-运算符相减。
    def __eq__(self, other): 定义对象相等性的行为，使对象可以使用==运算符比较。
    def __lt__(self, other): 定义对象小于其他对象的行为，使对象可以使用<运算符比较。
    def __gt__(self, other): 定义对象大于其他对象的行为，使对象可以使用>运算符比较。
"""

"""
实例属性：
    定义在__init__()方法中
    是独属于实例对象的属性
    可以通过实例访问

类属性：
    直接定义在类体中的属性
    由所有类的实例共享
    通过类或实例访问
    
普通方法：
    直接用 def 定义的方法
    该方法第一个参数必须是 self (self会指向实例本身)
    通过实例化后的对象调用，不能通过类调用
    一般用于执行与实例有关的操作或

类方法：
    在方法名字上加了 @classmethod 的方法
    该方法第一个参数必须是 cls (cls会指向类本身)
    可以通过类名或实例来调用
    一般用于执行与实例无关的操作
    
静态方法
    在方法名字上加了 @staticmethod 的方法
    无强制加入的参数
    可以通过类名或实例来调用
    不能访问类属性或实例属性
    一般用于执行与类和实例无关的操作
"""
