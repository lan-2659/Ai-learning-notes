# 元组一旦创建就不能修改（即元组中包含的元素个数和每个元素的对应类型不能修改）
# 但是可以改变元组中包含的可变对象


# 创建元组
"""
# tuple语句中可以放一个可迭代对象，这个函数会把可迭代对象中的每一个元素，转换为元组中的元素
tuple_x = tuple('hello world!')

tuple_x = tuple()          # 创建空元组
tuple_x = ()               # 创建空元组

tuple_x = (20, 30, 40)     # 将一个创建好的元组直接赋值给变量

tuple_x = (20, )           # 如果只有一个元素，需要在元素后添加逗号
x = (20)                   # 此处x是一个整型数据20,而不是元组
"""


# 元组的打包
"""
当用逗号分隔多个值时，Python 会自动将这些值打包成一个元组：
tuple_x = 'a', 5.2e30, 8+6j, 'xyz'     
tuple_x = 20,   # 这也是一个元组

特别注意：","在python中的优先级最低，必要时可以使用括号来明确逻辑（逗号并不是一个传统意义上的运算符，但是它在语法结构上有重要意义）
通过这种方法创建元组，我们一般叫它"隐式打包"
"""


# 元组的切片与取值
"""
切片的语法是：str[start:end:step]
注意：切片时遵循左闭右开的原则，str[start:end]的end是开区间，不包含end
第三个参数是步长(默认为1)，步长为正时表示正向遍历，步长为负时表示反向遍历
切片时会先根据步长的正负判断区间[start:end)是否可以进行正向或反向遍历，如果不行则会直接返回一个空元组
切片的原理是先切后取，如果判断可以遍历，则会从切下来的部分中start所在方向的那一端开始取值
并将取到的值组成一个新的元组并返回

tuple_x = ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')

print(tuple_x[0])                  # 通过索引输出元组第一个元素

print(tuple_x[1:3])                # 通过切片输出元组第二个到第三个元素
print(tuple_x[::-1])               # 倒序输出元组

print(tuple_x[-1:1:2])             # 输出空元组，这是因为[-1:1]这个范围的列表只能进行反向遍历

需要注意元组切片切下来的是一个元组（那怕只切一个元素），索引得到的是元组中的某一个值
通过元组切片得到新元组是原来对象的一个浅拷贝

使用元组索引某一个元素时，元组下标不能越界(只能使用存在的元组下标)
使用元组切片时，元组下标可以越界(可以任意使用元组下标)

一定要格外注意步长，一旦步长方向与你切取范围的方向不同，就会直接返回一个空元组
"""


# 元组的运算
"""
tuple_x = tuple_1 + tuple_2       # 用'+'连接多个元组，返回一个新元组
tuple_x = tuple_1 * 3             # 用'*'重复元组n次，返回一个新元组
"""


# 虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表，可改变元组中可变对象的值。
"""
tuple4 = ('a', 'b', ['A', 'B'])
tuple4[2][0] = 'X'
tuple4[2][1] = 'Y'
tuple4[2][2:]= 'Z'
#此时tuple4=('a', 'b', ['X', 'Y', 'Z'])
"""
