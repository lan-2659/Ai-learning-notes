# 不要在print()中套用print()
'''
不要在print()语句中套用print()语句
否则套用几个print语句就会输出几个None
'''


# 使用print()语句输出不同进制数
'''
使用print()方法输出时，不论是哪一种进制的数都会被转换为十进制
总之输出结果必定是十进制
'''


# 想在print()函数中输出一整个可迭代对象中的内容？
'''
    这样属于一条print()语句输出多个元素，end参数中的内容只会在整体输出完成后进行输出
print(*可迭代对象, sep=" ")      # sep 参数中的内容，会在每输出一次元素后进行输出，默认为 " "

print(x for x in 可迭代对象 if 条件)   # 这样输出的是一个地址
'''


# python中的 列表、元组、字符串、range()函数使用后返回的序列 都可以进行切片
"""
语法：
    sequence[start:stop:step]
        start: 指定切片的开始位置（指定索引的位置）。默认从序列的开始位置（索引 0）开始。
        stop: 指定切片的结束位置（但不包括该位置的元素）。默认是序列的结尾。
        step: 指定切片的步长，默认为1。如果 step 是2，则每次跳过一个元素，步长为3则每次跳过两个元素，等等。

注意：切片本质上是把我们选中的部分浅拷贝下来，然后把拷贝下来的东西返回给我们
"""


# 'nan'
"""
在 Python 中，nan（Not a Number）是一个特殊的浮点数值，用于表示“不是一个数字”或“无效的数值”。
它是浮点数类型（float）的一部分，通常用于处理数学运算中的异常情况，例如除以零或对负数开平方等。
"""


# TODO 注释
"""
# TODO 注释：
# TODO 是一种特殊的注释，用于标记代码中需要完成的任务或待处理的问题。
在开发过程中，这种注释可以帮助开发者快速定位需要关注的地方。
"""

# 文件路径中的'.'导入
"""
.  :当前目录
.. :上级目录
只有这两个，不存在 '...'，但是允许 '../..'
"""