

# 字符串是可迭代对象

# 创建字符串
"""
# 单引号创建
str_ = ''   
# 双引号创建
str_ = ""              
# 三引号多用于创建多行字符串
str_ = '''hello!              
world!'''
"""


# 基本操作
'''
str_ = r'C:\Windows\notepad.exe' # 字符串界定符前加r/R,任何字符都不转义,输出时会按原样输出

str_ = str_1 + str_2             # 用'+'连接字符串返回一个新字符串
new_str = 'hello''world'         # 两个或以上字符串如果紧邻在一起，会自动连接

print (str1 * 2)                 # 输出字符串两次,"连着输出",print(2 * str1)结果相同

切片的语法是：str[start:end:step]
    注意：字符串切片时遵循左闭右开的原则，str[start:end]的end是开区间，不包含end
切片的原理是先切后取，第三个参数是步长(默认为1)，步长为正时表示正向遍历，步长为负时表示反向遍历
切片时会先根据步长的正负判断区间[start:end)是否可以进行正向或反向遍历，如果不行则会直接返回一个空字符串
print (str1[0])                  # 通过索引输出字符串第一个字符
print (str1[2:5])                # 输出从第三个开始到第五个的字符
print (str1[0:-1])               # 输出第一个到倒数第二个的所有字符
print (str1[::-1])               # 输出字符串倒序
'''


# 字符串中的占位符
'''
%s: 字符串占位符
%d: 整数占位符
%f: 浮点数占位符
%c: 字符占位符
%x: 十六进制数占位符
%o: 八进制数占位符
%b: 二进制数占位符
%e: 指数占位符
%E: 指数占位符
%%: 输出一个%
'''


# 字符串格式化
'''
在字符串首位加f可以使字符串中的 {} 有特殊含义
此时 {} 中只能输入数值、变量或函数
输出时不会输出 {} ，只会输出 {} 中的数值、变量值或函数结果
可以在 {} 中进行对数值或变量的操作，如数值之间的运算、两个变量的连接
'''


# 字符串对象的常见API
'''
str1.upper()                     # 将str1中的小写字母转成大写字母, 返回一个字符串

str1.lower()                     # 将字符串str1中的大写字母转小写字母, 返回一个字符串

str1.swapcase()                  # 将str1中的大小写互换, 返回一个字符串

str3.title()                     # 将字符串中每个单词首字母改成大写, 返回一个字符串

str.rstrip('字符串')              # 会删除字符串的右边指定字符串, 不指定会默认删除空白, 返回一个字符串

str.lstirp('字符串')              # 会删除字符串的左边指定字符串, 不指定会默认删除空白, 返回一个字符串

str.strip('字符串')               # 会删除字符串两边的全部指定字符串, 不指定会默认删除空白, 返回一个字符串

str.split('分割符', 分割次数)     # 会返回一个列表，可以不指定分割符和分割次数，默认分割符为空格，默认分割次数为无限次

str.replace('待替换字符', '替换字符', 次数) # 会返回一个字符串，如果不指定次数，会将所有待替换字符替换掉
'''


