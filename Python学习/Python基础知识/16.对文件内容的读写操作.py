# .py文件和.ipynb文件中的相对路径
"""
.py 文件中的相对路径：
   pycharm：当前打开文件所在的目录
   vscode：打开的文件夹中的第一层目录

.ipynb 文件中的相对路径：
   pycharm/vscode：当前打开文件所在的目录
"""


# open()函数
"""
open 是python的内置函数，用于打开文件并读写内容
open(file(文件路径), mode='r', encoding=None)      # 返回一个 BufferedReader 对象，用于操作文件 (只读方式打开文件)

一般情况下，open()函数 会和 with关键字 搭配使用（确保我们调用的文件资源在使用完毕后被安全释放）
with open(file, 'r+b') as f:
    f.read()

with 关键字用于创建一个 上下文管理器，主要用于管理资源的分配和释放（如文件、网络连接、锁等）
确保资源在使用后自动清理，即使代码执行过程中出现异常也能安全释放资源
"""


# open()函数中文件的打开方式：
"""
'r'：默认模式，用于以只读方式打开文件。文件的指针将放在文件的开头。如果文件不存在，会引发 FileNotFoundError。

'w'：写入模式，用于打开文件并写入内容。如果文件已存在，则会先清空文件的内容，然后写入新内容；如果文件不存在，则创建新文件。

'a'：追加模式，用于在文件末尾添加新内容。如果文件不存在，则创建新文件。文件指针将放在文件的末尾。

'r+'：读取和写入模式，用于同时读取和写入文件。文件指针将放在文件的开头。如果文件不存在，会引发 FileNotFoundError。

'a+'：追加和读取模式，用于在文件末尾追加内容并同时进行读取。如果文件不存在，则创建新文件。文件指针将放在文件的末尾。

添加 'b' 到模式字符串中，如 'rb'、'wb'、'ab'、'r+b' 等，表示以二进制模式打开文件。用于处理非文本文件，如图片、视频等。
默认情况下，文件以文本模式打开，可以省略 't'。文本模式下，文件内容以字符串的形式处理。
"""


# BufferedReader 对象的常用API：
"""
BufferedReader.read(size=-1)           # 读取文件的全部内容，或者文件指针后的 size 个字符，返回一个字符串
BufferedReader.readline(size=-1)       # 从文件指针位置开始读取，且读取内容不会超出文件指针所在行，默认是读一行，返回一个字符串
BufferedReader.readlines()             # 读取文件的所有行，返回一个列表

BufferedReader.write(string)           # 将字符串写入文件。在写模式下会覆盖文件中原有的内容，再追加模式下会在文件末尾添加内容

BufferedReader.seek(offset, whence=0)  # 移动文件指针到指定位置。offset 表示偏移量，whence 表示偏移相对位置，0 表示从文件开头偏移，1 表示从当前位置偏移，2 表示从文件末尾偏移
                                       # seek()方法的偏移量是按字节计算的，需要注意多字节字符，且只有在二进制模式下才能精准执行
"""
