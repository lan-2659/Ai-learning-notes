# 目录
"""
range()
sorted()
min() 和 max()
copy()
enumerate()
abs()
map()
filter()
zip()
join()
chr() 和 ord()
iter()
count()
all() 和 any()
"""


# range(start=0,stop,step=1)
"""
range(start=0, stop, step=1)      返回一个 range对象，这个对象中会保存一个整数序列（但不会立即生成值，而是惰性生成值）

range 的三个参数必须是整数
步长 step 参数可正可负，但不能为0
"""


# sorted()
"""
sorted(可迭代对象, *, key=None, reverse=False)      返回一个新的已排序列表（默认升序）

key参数 接收一个函数，这个函数会对可迭代对象的每一个元素使用，返回比较的值
reverse参数	接收布尔值，True 表示降序，False 表示升序

注意：当元素相等时，保持它们原有的相对顺序
注意：不同类型不能排序，但可以通过 key参数 中的函数返回一个同类型的值，来进行间接排序
"""


# min() 和 max()
"""
min(可迭代对象，key=None)   
    key参数可以接收一个函数，这个函数会对可迭代对象的每一个元素使用，返回比较的值

    这个函数会选出可迭代对象的元素中最小的那一个
    (字符串按 ASCII 值逐字符比较)

max(可迭代对象, key=None)   
    key参数可以接收一个函数，这个函数会对可迭代对象的每一个元素使用，返回比较的值

    这个函数会选出可迭代对象的元素中最大的那一个
    (字符串按 ASCII 值逐字符比较)
"""


# 拷贝方法
"""
1、copy()浅层拷贝
变量1 = 对象
变量2 = 对象.copy()                      
两个变量指向不同的表层对象，但还指向同一个子对象

2、copy.deepcopy()深层拷贝          # 要先导入copy模块
变量1 = 对象
变量2 = copy.deepcopy(对象)
变量指向不同的表层对象和子对象

3、字符串、列表、元组的切片方式复制也是浅层拷贝
"""


# enumerate()
"""
enumerate(可迭代对象, start=0)        返回一个生成器对象，每次迭代生成一个元组 (index, value)

start参数	接收一个整数，表示索引的起始位置，默认为 0
"""


# abs()
"""
abs(i - j)    返回计算结果的绝对值
"""


# map()函数
"""
map(函数, 可迭代对象)           会将接收到的函数应用到可迭代对象的每一个元素上，然后返回一个迭代器
"""


# filter()函数
"""
filter(判断函数，可迭代对象) 
    会对可迭代对象中的所有元素使用判断函数
    （判断函数的返回值只能是True或False）
    会将所有符合条件的元素打包成一个迭代器返回
"""


# zip()函数
"""
是一个内置函数，用于将多个可迭代对象作为参数，将对应的元素打包成元组，然后返回由这些元组组成的迭代器
"""


# join()方法
"""
'分隔符'.join(可迭代对象)   返回一个字符串，将可迭代对象中的元素连接成一个字符串，且每个元素之间以分隔符分开
"""


# chr() 和 ord()
"""
chr()

    将一个ASCll码或是Unicode码转换成对应字符
    chr(65) --> 'A'

ord()

    将一个字符转换成ASCll码或是Unicode码
    ord('A')  --> 65
"""

# iter() 函数
"""
iter(可迭代对象) 
    返回一个可迭代对象的迭代器
    这个迭代器只能往前取值，不能后退，即只能用一次
    可以对迭代器对象进行循环
    迭代器对象可以用 next(迭代器对象) 语句返回下一个元素
    若下一个元素不存在，会触发 StopIteration 异常
    注意 next() 方法只能对迭代器对象使用
    
迭代器：访问可迭代对象的工具
迭代器对象：就是迭代器来源的那个可迭代对象
"""


# count()函数
"""
可迭代对象.count(元素)
    返回一个数字，代表这个元素在可迭代对象中的数量
"""


# all()函数 与 any()函数
"""
all()
    all(可迭代对象)    返回一个布尔值，判断可迭代对象中的所有元素是否均为真值(全为真返回True)

    (如果可迭代对象为空（如空列表、空元组等），会返回 True)

any()
    any(可迭代对象)    返回一个布尔值，判断可迭代对象中的任意一个元素是否为真值(只要有一个为真返回True)

    (如果可迭代对象为空（如空列表、空元组等），会返回 False)
"""

